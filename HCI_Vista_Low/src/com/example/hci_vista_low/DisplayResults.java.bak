package com.example.hci_vista_low;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.concurrent.ExecutionException;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.android.Utils;
import org.opencv.core.Mat;
import org.opencv.highgui.Highgui;

import android.app.Activity;
import android.app.ProgressDialog;
import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.gesture.GestureOverlayView;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.speech.RecognizerIntent;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

public class DisplayResults extends Activity {
	private static final int VOICE_RECOGNITION_REQUEST_CODE = 9999;
	private Bitmap resultimage;
	Mat mat; // OpenCV matrix for image
	Bitmap.Config conf = Bitmap.Config.ARGB_8888; // see other conf types
	ImageView result;
	private ProgressBar pb;
	private static final String TAG = "OCVSample::Activity";
	private SingleTouchEventView singleTouch = null;
	private LinearLayout action_layout = null;
	private Button btn_cancel = null; // cancel the current selection.
	private Button btn_submit = null; // submit the small patches to the server.
	private Context mContext = this;
	private String SERVERURL = "";
	private TextView json_view = null;
	private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {
		@Override
		public void onManagerConnected(int status) {
			switch (status) {
			case LoaderCallbackInterface.SUCCESS: {
				Log.i(TAG, "OpenCV loaded successfully");
				OpenCVInit();
				display();
			}
				break;
			default: {
				super.onManagerConnected(status);
			}
				break;
			}
		}
	};

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu items for use in the action bar.
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.display_results, menu);
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle presses on the action bar items
		switch (item.getItemId()) {

		case R.id.action_compose:
			speak();
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}

	public void speak() {
		Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
		// Specify the calling package to identify your application
		intent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, getClass()
				.getPackage().getName());

		// Given an hint to the recognizer about what the user is going to say
		intent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, 1);
		intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
				RecognizerIntent.LANGUAGE_MODEL_WEB_SEARCH);

		startActivityForResult(intent, VOICE_RECOGNITION_REQUEST_CODE);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (requestCode == VOICE_RECOGNITION_REQUEST_CODE)

			// If Voice recognition is successful then it returns RESULT_OK
			if (resultCode == RESULT_OK) {

				ArrayList<String> textMatchList = data
						.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);

				if (!textMatchList.isEmpty()) {
					// If first Match contains the 'search' word
					// Then start web search.
					if (textMatchList.get(0).contains("search")) {

						String searchQuery = textMatchList.get(0).replace(
								"search", " ");
						Intent search = new Intent(Intent.ACTION_WEB_SEARCH);
						search.putExtra(SearchManager.QUERY, searchQuery);
						startActivity(search);
					} else {
						// populate the Matches
						String msg = textMatchList.get(0);
						pb.setVisibility(View.VISIBLE);
						AsyncItemDec dec = new AsyncItemDec();
						dec.execute(100);
						// showToastMessage(msg.trim());
					}

				}
				// Result code for various error.
			} else if (resultCode == RecognizerIntent.RESULT_AUDIO_ERROR) {
				showToastMessage("Audio Error");
			} else if (resultCode == RecognizerIntent.RESULT_CLIENT_ERROR) {
				showToastMessage("Client Error");
			} else if (resultCode == RecognizerIntent.RESULT_NETWORK_ERROR) {
				showToastMessage("Network Error");
			} else if (resultCode == RecognizerIntent.RESULT_NO_MATCH) {
				showToastMessage("No Match");
			} else if (resultCode == RecognizerIntent.RESULT_SERVER_ERROR) {
				showToastMessage("Server Error");
			}
		super.onActivityResult(requestCode, resultCode, data);
	}

	void showToastMessage(String message) {
		Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		Log.i(TAG, "Trying to load OpenCV library");
		if (!OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_3, this,
				mLoaderCallback)) {
			Log.e(TAG, "Cannot connect to OpenCV Manager");
		} else {
			Log.i(TAG, "opencv successfull");
		}

	}

	class AsyncItemDec extends AsyncTask<Integer, Integer, String> {
		protected String doInBackground(Integer... params) {

			for (int i = 0; i <= 100; i++) {
				pb.setProgress(i);
				publishProgress(i, 5);
				try {
					Thread.sleep(params[0]);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			return "";
		}

		protected void onProgressUpdate(Integer... progress) {
		}

		protected void onPostExecute(String result) {
			// setTitle(result);
			pb.setVisibility(View.INVISIBLE);
		}

	}

	public void OpenCVInit() {
		setContentView(R.layout.activity_display_results);
		pb = (ProgressBar) findViewById(R.id.item_dec_progress);
		singleTouch = (SingleTouchEventView) findViewById(R.id.single_touch);
		// result = (ImageView) findViewById(R.id.result_pic);
		mat = new Mat();
		action_layout = (LinearLayout) findViewById(R.id.bottomBar);
		singleTouch.setActionLayout(action_layout);
		btn_cancel = (Button) findViewById(R.id.btn_cancel);
		btn_cancel.setOnClickListener(new Button.OnClickListener() {
			public void onClick(View v) {
				singleTouch.clear();
				json_view.setText("");
				json_view.setVisibility(View.INVISIBLE);
			}
		});
		btn_submit = (Button) findViewById(R.id.btn_submit);
		// In this submit action, we are going to send out the patches to the
		// server.
		btn_submit.setOnClickListener(new Button.OnClickListener() {
			public void onClick(View v) {
				Bitmap[] selected_areas = singleTouch.getSelectionBitmaps();
				// do the server staff.
				
				String[] formated_results = new String[selected_areas.length];
				for (int i = 0; i < selected_areas.length; i++) {
					ServerTask task = new ServerTask();
					task.setIdx(i + 1);
					try {
						String json_result = task.execute(selected_areas[i])
								.get();
						JSONArray multiResults = new JSONArray(json_result);
						System.out.println(multiResults.length() + "\n");
						for (int j = 0; j < multiResults.length(); j++) {
							JSONObject jsonObject = multiResults
									.getJSONObject(j);
							String title = jsonObject.getString("title");
							String desc = jsonObject.getString("details");
							double price = jsonObject.getDouble("price");
							String path = jsonObject.getString("url");
							System.out.println("title:" + title);
							System.out.println("desc: " + desc);
							System.out.println("price: " + price);
							System.out.println("path: " + path);
							formated_results[i]+= title + '\n';
							/*
							formated_results[i] += desc + '\n';
							formated_results[i] += price + '\n';
							formated_results[i] += path + '\n';
							*/
						}
						formated_results[i] += "----------------------------\n";

					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (ExecutionException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (JSONException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				String display_titles = "";
				for(int i = 0;i < formated_results.length; i++)
				{
					display_titles += formated_results[i];
				}
				json_view.setText(display_titles);
				json_view.setVisibility(View.VISIBLE);
				singleTouch.clear();
			}
		});
		json_view = (TextView) findViewById(R.id.json_result);
		SERVERURL = getResources().getString(R.string.server_url);
	}

	public void display() {
		Intent intent = getIntent();
		String result_fn = intent
				.getStringExtra(MainActivity.EXTRA_INTENT_MESSAGE);
		// Bitmap image = BitmapFactory.decodeFile(result_fn);
		// result = (ImageView) findViewById(R.id.result_pic);
		// result.setImageBitmap(image);
		// result = new SingleTouchEventView(this, null, result_fn);
		// setContentView(R.layout.activity_display_results);
		// setContentView(new SingleTouchEventView(this, null, result_fn));
		singleTouch.setImageFile(result_fn);
		// addContentView(new SingleTouchEventView(this, null, result_fn));
	}

	public class ServerTask extends AsyncTask<Bitmap, Integer, String> {
		public byte[] dataToServer;
		public Bitmap processed_image = null;
		private final int UPLOADING_PHOTO_STATE = 0;
		private final int SERVER_PROC_STATE = 1;
		private ProgressDialog dialog;
		private int idx = -1;

		/**
		 * 
		 * @param image_patches
		 * @param format
		 *            .jpg or .png which indicate the format of the uploaded
		 *            image.
		 * @return
		 */
		HttpURLConnection uploadPhoto(byte[] image_patches, String format) {
			final String serverFileName = System.currentTimeMillis() + "_"
					+ (int) Math.round(Math.random() * 1000) + format;
			final String lineEnd = "\r\n";
			final String twoHyphens = "--";
			final String boundary = "*****";
			try {
				URL url = new URL(SERVERURL);
				// Open a HTTP connection to the URL
				final HttpURLConnection conn = (HttpURLConnection) url
						.openConnection();
				// Allow Inputs
				conn.setDoInput(true);
				// Allow Outputs
				conn.setDoOutput(true);
				// Don't use a cached copy.
				conn.setUseCaches(false);
				// Use a post method.
				conn.setRequestMethod("POST");
				conn.setRequestProperty("Connection", "Keep-Alive");
				conn.setRequestProperty("Content-Type",
						"multipart/form-data;boundary=" + boundary);

				DataOutputStream dos = new DataOutputStream(
						conn.getOutputStream());

				dos.writeBytes(twoHyphens + boundary + lineEnd);
				dos.writeBytes("Content-Disposition: form-data; name=\"uploadedfile\";filename=\""
						+ serverFileName + "\"" + lineEnd);
				dos.writeBytes(lineEnd);
				// create a buffer of maximum size
				// dos.write(buffer, 0, bufferSize);
				dos.write(image_patches);
				// send multipart form data after file data...
				dos.writeBytes(lineEnd);
				dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
				publishProgress(SERVER_PROC_STATE);
				// close streams
				dos.flush();
				return conn;
			} catch (MalformedURLException ex) {
				Log.e(TAG, "error: " + ex.getMessage(), ex);
				return null;
			} catch (IOException ioe) {
				ioe.printStackTrace();
				Log.e("HTTP-upload", "error: " + ioe.getMessage(), ioe);
				return null;
			}
		}

		public ServerTask() {
			dialog = new ProgressDialog(mContext);
		}

		public void setIdx(int idx) {
			this.idx = idx;
		}

		public String dealResponseResult(InputStream inputStream) {
			String resultData = null; //
			ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
			byte[] data = new byte[1024];
			int len = 0;
			try {
				while ((len = inputStream.read(data)) != -1) {
					byteArrayOutputStream.write(data, 0, len);
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
			resultData = new String(byteArrayOutputStream.toByteArray());
			return resultData;
		}

		protected void onPreExecute() {
			this.dialog.setMessage("Photo captured");
			this.dialog.show();
		}

		@Override
		protected String doInBackground(Bitmap... params) { // background
															// operation
			Bitmap upload_image = params[0];
			ByteArrayOutputStream stream = new ByteArrayOutputStream();
			upload_image.compress(Bitmap.CompressFormat.JPEG, 70, stream);
			byte[] bytes_array = stream.toByteArray();
			// processImage(bytes_array);
			// Main code for processing image algorithm on the server
			publishProgress(UPLOADING_PHOTO_STATE);
			final HttpURLConnection conn = uploadPhoto(bytes_array, ".jpg");
			if (conn != null) {
				// now it's time to receive the result for the just uploaded
				// image.
				// get image result from server and display it in result view
				InputStream is;
				try {
					is = conn.getInputStream();
					String json_txt_result = dealResponseResult(is);
					// System.out.println("Json: " + json_txt_result);
					is.close();
					conn.disconnect();// No use anymore.
					return json_txt_result;
				} catch (IOException e) {
					Log.e(TAG, e.toString());
					e.printStackTrace();
				}
			}
			return null;
		}

		// progress update, display dialogs
		@Override
		protected void onProgressUpdate(Integer... progress) {
			if (progress[0] == UPLOADING_PHOTO_STATE) {
				dialog.setMessage("Uploading");
				dialog.show();
			} else if (progress[0] == SERVER_PROC_STATE) {
				if (dialog.isShowing()) {
					dialog.dismiss();
				}
				if (idx >= 0) {
					dialog.setMessage("Processing patch " + idx);
				} else
					dialog.setMessage("Processing");
				dialog.show();
			}
		}

		@Override
		protected void onPostExecute(String param) {
			if (dialog.isShowing()) {
				dialog.dismiss();
			}
		}
	}
}
